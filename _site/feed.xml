<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-07-24T14:41:33+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">개발새발</title><subtitle>A friend who shares is a friend who cares.</subtitle><author><name>박준수</name></author><entry><title type="html">Devops</title><link href="http://localhost:4000/ict/DevOps/" rel="alternate" type="text/html" title="Devops" /><published>2022-07-08T00:00:00+09:00</published><updated>2022-07-08T00:00:00+09:00</updated><id>http://localhost:4000/ict/DevOps</id><content type="html" xml:base="http://localhost:4000/ict/DevOps/"><![CDATA[<h2 id="devops란">DevOps란</h2>

<p><strong>DevOps</strong>란 프로그램 개발 방법론의 하나로 개발자와 운영자와의 협업 및 전환을 빠르게 하기 위한 방법이다.</p>

<blockquote>
  <p>소프트웨어 개발 방법론의 하나로, 개발(development)과 운영(operation)을 결합한 혼성어이다. 개발 담당자와 운영 담당자가 연계하여 협력하는 개발 방법론을 말한다.</p>

  <p>– 두산백과</p>
</blockquote>

<p>전통적인 조직의 경우 개발자부서에서 개발을 하고 운영을 하는 부서가 이를 넘겨 받아 운영을 한다. 개발자들이 시스템 전반적인 지식이 없는 경우 자신이 작성한 프로그램이 로컬에서는 돌아가지만 시스템에 영향을 주거나 정상적인 동작을 하지 못하는 경우가 있었다고 한다.</p>

<p align="center"><img src="/img/ICT/DevOps/devvsops.jpeg" height="100px" width="400px" /></p>

<p>개발부서와 운영부서와의 마찰을 줄이고 능률을 향상 시키기 위해 <strong>DevOps</strong>라는 role이 생기게 되었다. 
<strong>Devops</strong>는 자동화, 협업, 빠른 피드백과 반복적인 개선과정을 통해 개발과 운영의 전환 속도를 빠르게 지원한다.</p>

<h2 id="gitlab">GitLab</h2>

<p>GitLab은 Offline 환경에서도 지원을 해 많은 회사 및 조직에서 사용 중인 서비스다. GitLab에서는 단순 레포지토리로서의 개념이 아닌 운영에도 많은 도움을 주는 관리도구들이 많아 <strong>DevOps</strong>를 구현하는데 좋은 환경이라고 한다.</p>

<h2 id="devops-in-gitlab">DevOps in GitLab</h2>

<p>깃랩에서 DevOps를 어떤 원칙과 방식으로 지원하고 구현하는지 알아보도록 하자.</p>

<h3 id="devops-4대-원칙"><strong>DevOps 4대 원칙</strong></h3>
<ul>
  <li>소프트웨어 개발 생명주기의 자동화</li>
  <li>협동과 소통</li>
  <li>지속적 향상 및 소모 자원의 최소화</li>
  <li>빠른 피드백 주기로 사용자 요구의 집중</li>
</ul>

<p>해당 4대 원칙을 DevOps의 중요 요소로 Gitlab에서는 정의한다. 해당 원칙을 바탕으로 위에서 말한 DevOps의 목표인 개발과 운영간의 전환을 빠르게 한다.</p>

<h3 id="devops-4단계"><strong>DevOps 4단계</strong></h3>

<p>DevOps가 생기며 복잡해지는 경우가 있는데, 이는 두가지 요인 때문이다.</p>

<ul>
  <li>모놀리식 아키텍처에서 MSA(Microservice Architectures)로의 변화</li>
  <li>관리도구와 프로젝트의 증가로 프로젝트 도구의 통합이 필요할 경우.</li>
</ul>

<p>위의 요인을 위한 진화는 4가지 단계로 진행된다.</p>

<p><strong>1. 자신만의 DevOps 구현</strong><br />
   각 팀과 개발자들은 자신만의 DevOps 도구를 선택하게 된다. 이렇게 되면 다른 개발자들 및 팀들과의 협업에서 문제가 생길 수 있는데 이는 다른 팀들이 당신의 도구에 익숙하지 않기 때문이다.</p>

<p><strong>2. Best-in-Class DevOps</strong><br />
   이 단계에서는 서로 다른 도구들을 지양하고, 같은 도구들을 사용하도록 정의한다. DevOps 주기의 각 단계에서 선호하는 하나의 도구를 선택하고 정의함으로 조직간의 협업을 원할히 수행 할 수 있도록 돕는다. 하지만 도구들을 한정적으로 선택하며 소프트웨어를 변경해야되는 문제가 생길 수 있다.</p>

<p><strong>3. DIY DevOps</strong><br />
   위 문제를 해결하기 위해 DIY DevOps 단계를 수행한다. 개발자들은 DevOps 솔루션을 통합하기 위해 다시 개발을 하게 된다. 보통 개발과정에서 다른 개발 도구들과의 통합이나 팀들간의 통합이 고려되지 않기 때문에 해당 과정이 성공적으로 수행되는 경우가 드물다.</p>

<p><strong>4. DevOps Platform</strong><br />
   위에서 사용되는 문제들을 해결하기 위해 단일 어플리케이션 플랫폼<strong>(Gitlab)</strong>이 등장하게 되었다. 개발, 운영, 보안 등 전산 전반에 기여하는 팀들이 사용하는 도구들을 DevOps 주기(계획, 빌드, 보안, 배포)에 맞춰 end-to-end에서 융합 가능한 시스템으로 제공된다. 사용자 친화적인 UI, 융합된 코드 저장소에서 단일 코드 베이스로 제작되어 비효율적이고 신뢰성 낮은 DIY DevOps 환경 보다 신뢰성 높게 동작한다.</p>

<h2 id="devops-생명주기"><strong>DevOps 생명주기</strong></h2>

<p>DevOps 생명주기는 아래의 10단계로 이루어져있다.
해당 단계를 통해 배포, 유지 보수 및 보안성을 유지하며 S/W가 개발되고 운영된다.</p>

<ol>
  <li>관리</li>
  <li>계획</li>
  <li>생성</li>
  <li>검증</li>
  <li>Package</li>
  <li>보안</li>
  <li>배포</li>
  <li>구성</li>
  <li>모니터링</li>
  <li>보호</li>
</ol>

<h2 id="devops-도구-및-구성-요소">DevOps 도구 및 구성 요소</h2>

<ol>
  <li>Source Code Management</li>
  <li>Agile Project &amp; Portfolio Management</li>
  <li>CI(Continuous Integration)</li>
  <li>CD(Continuous Delivery)</li>
  <li>Shift Left Security</li>
  <li>Monitoring and Feedback</li>
  <li>Rapid Innovation</li>
</ol>

<h2 id="devops-engineer">DevOps Engineer</h2>

<p>DevOps Engineer는 모든 소프트웨어 개발 및 운영을 신경써야된다. 개발 과정을 업무 흐름에 녹여야 되고 자동화가 가능한 부분을 판단하고 적용해야하며 개발 코드들을 분석하고 테스트 해야한다. DevOps Engineer는 빌드, 배포, 업데이트 및 환경 구성 등 모든 전반적인 부분을 책임지고 관리해야한다. 따라서 개발 언어에 대한 이해가 필요하며, 기술자들간의 의사소통 능력 뿐만 아니라 사업 및 비즈니스에 대한 이해도 필요하다.</p>

<p>결국 DevOps의 목표는 빠르게 변하는 시장에 맞춰 효율적으로 개발하고 배포하는데 필요없는 소모를 줄이는 것이다.</p>

<h2 id="reference">Reference</h2>

<p><a href="https://about.gitlab.com/topics/devops/#what-is-a-dev-ops-platform">GitLab-What is DevOps</a></p>]]></content><author><name>박준수</name></author><category term="ICT" /><category term="Operation" /><category term="인프라" /><summary type="html"><![CDATA[DevOps란]]></summary></entry><entry><title type="html">Storage</title><link href="http://localhost:4000/ict/Storage/" rel="alternate" type="text/html" title="Storage" /><published>2022-04-17T00:00:00+09:00</published><updated>2022-04-17T00:00:00+09:00</updated><id>http://localhost:4000/ict/Storage</id><content type="html" xml:base="http://localhost:4000/ict/Storage/"><![CDATA[<p>## 스토리지란</p>

<p>스토리지란 직역하자면 <strong>저장 장치</strong>이다. 우리가 사용하는 PC의 경우 PC에 디스크가 있고 해당 위치에 OS, DATA를 저장하고 이를 사용한다.</p>

<p>하지만 DB나 다중 사용자 환경을 지원하는 서버의 경우 가지고 있는 슬롯만으로는 확장성에 한계가 있다. 성능 및 경제적인 문제로 서버는 Compute 용도로만 사용하고 스토리지의 경우 외부 장치를 이용하는 것이 일반적이다.</p>

<p><strong>HCI 및 Composoable</strong> 등 현재 아키텍처에서는 이를 같이 두는 경우도 있다.</p>

<p>스토리지는 다양한 방식으로 나눌 수 있는데 인터페이스(연결방식)에 따라 <strong>DAS, SAN, NAS</strong> 방식으로 나눠진다.</p>

<h2 id="dasdirect-attached-storage">DAS(Direct Attached Storage)</h2>

<p>스토리지 시스템을 <strong>직접(Direct)</strong>로 서버에 붙이는 방식이다. 통상적으로 PC에서 이용하는 외장하드 및 내장하드를 생각하면 이해가 쉽다. 네트워크를 이용하지 않고 IO를 이용해 직접 붙이는 방식이기 때문에 확장성에 한계가 있다.</p>

<h2 id="sanstorage-area-network">SAN(Storage Area Network)</h2>

<p>서버와 호스트간의 <strong>전용 네트워크</strong>를 구성해 이를 연결한다. 기존 네트워크는 NIC를 이용해 구성하는 반면에 SAN은 <strong>HBA</strong> 카드를 이용해 구성한다. 인터페이스 속도도 네트워크의 경우 1G, 10G, 25G, 50G 등으로 구성되는 반면에 HBA의 경우 8G, 16G, 32G 등으로 구성된다.</p>

<p>일반적인 IP Protocol이 아닌 <strong>SCSI Protocol</strong>을 이용하며, <strong>Block</strong> 단위의 IO로 블록 스토리지라고도 한다.</p>

<p><strong>SAN 스위치</strong>를 이용해 서버와 스토리지간 연결한다. SAN 스위치의 경우 <strong>Zoning 구성</strong>을 통해 1:1, 1:N 등 다양한 방식으로 Maaping 가능해 확장성이 높다. 현재 데이터센터에서 사용되는 전통적인 연결방식이다.</p>

<p>블록 스토리지의 경우 정형 데이터를 보관하기가 좋아 DB서버와 많이 사용된다.</p>

<h2 id="nasnetwork-attached-storage">NAS(Network Attached Storage)</h2>

<p><strong>Network</strong>를 이용해 서버와 스토리지를 연결한다. NIC 카드를 이용해 구성되어 서비스 망에 같이 이용할 수도 있고, 사설망으로 따로 구성할 수도 있다.</p>

<p><strong>DAS 및 SAN 스토리지의 경우 파일시스템을 서버가 가지고 있으나, NAS의 경우 파일 시스템을 NAS가 가지고 있어 공유하기가 쉽다.</strong></p>

<p>전통적인 스토리지의 경우 파일 공유가 필요할 경우 스토리지 장비에서 지원하거나 솔루션을 구입해 사용해야 하지만 NAS의 경우에는 추가적인 솔루션이나 기능이 필요가 없다.</p>

<p><strong>FILE I/O</strong> 방식으로 파일 스토리지라고도 불린다. 현재애는 <strong>오브젝트 스토리지</strong>라는 새로운 방식의 스토리지도 등장하며 계속해서 발전하고 있다.</p>

<p>Object 스토리지의 경우 비정형 데이터를 보관하기가 좋아 빅데이터 등의 신기술이 사용되는 도메인에 많이 사용된다고 한다.</p>]]></content><author><name>박준수</name></author><category term="ICT" /><category term="Storage" /><category term="DAS" /><category term="NAS" /><category term="SAN" /><summary type="html"><![CDATA[## 스토리지란]]></summary></entry><entry><title type="html">Server</title><link href="http://localhost:4000/ict/Server/" rel="alternate" type="text/html" title="Server" /><published>2022-04-09T00:00:00+09:00</published><updated>2022-04-17T00:00:00+09:00</updated><id>http://localhost:4000/ict/Server</id><content type="html" xml:base="http://localhost:4000/ict/Server/"><![CDATA[<p>서버란 무엇인가.</p>

<p><strong>사용자들에게 서비스를 제공해 주는 것.</strong></p>

<p><strong>사용자(Client)</strong>들의 요구에 따라서 필요한 서비스를 제공해주는 장비다.</p>

<blockquote>
  <p>어원은 <strong>특정 역할에 특화 된 것</strong>을 의미한다고 한다.</p>
</blockquote>

<p>용도에 따라서 구조가 나눠지는데 크게 <strong>클라이언트-서버 구조</strong>와 <strong>3-tier 구조</strong>로 나눌수 있다.</p>

<h2 id="클라이언트-서버-구조">클라이언트-서버 구조</h2>

<p>사용자(Client)가 <strong>특정 프로그램(Client Program)</strong>을 설치하고 이를 이용해 서버에 접속 해 서버가 제공하는 서비스를 이용한다.</p>

<p>해당 서비스에 기능이 추가되거나 보완이 되는 경우 클라이언트 업데이트가
  필요한 경우도 있다.</p>

<p>이용자가 클라이언트를 업데이트 해야 되는 불편함이 감수되고, 사용자가
 업데이트를 안하고 서비스를 사용한다면 시스템적으로 취약점이 될 수도 있다.</p>

<h2 id="3-tier-구조">3-Tier 구조</h2>

<p>웹 서비스에서 많이 사용 되는 구조로 <strong>프레젠테이션, 애플리케이션, 데이터</strong> 계층으로 이루어져 있다.</p>

<ol>
  <li>
    <p>프레젠테이션 계층</p>

    <p>사용자의 입력을 받고 결과를 표시한다. 웹 서비스에서는 웹 화면을 띄워주는 웹 서버가 해당된다.</p>
  </li>
</ol>

<!--<h2>웹 서버</h2>
&nbsp;기본 APM(Apache(웹 서버), PhP(프로그래밍 언어), MySql(데이터베이스,요즘엔 MariaDB) 이렇게 해서 APM이라고 불린다. 기본이지만 요즘에는 장고(Django) 나 다른 방법으로 구축할 수 있습니다. 요즘엔 Apache 대신 Tomcat을 사용합니다.
 
&nbsp;보통 웹 서버의 경우 리눅스를 이용해서 구축을 많이 하는데 리눅스의 대표적인 특징에는 <strong>쉘</strong>과 <strong>커널</strong>이 있다.

<h2>WAS 서버</h2>
<h2>쉘</h2>
&nbsp;쉘의 경우 사용자와 커널간의 인터페이스이다. 사용자가 명령어를 입력하는 bash 쉘이 대표적이다.
<h2>커널</h2>
&nbsp;커널은 하드웨어의 동작 관리 및 소프트웨어와의 동작을 가능하게 해준다. 커널의 경우 OS의 핵심이라고 할만큼 중요하다. 커널에서 실행되는 프로그램에는 주의가 필요하며 보통 <strong>root</strong> 계정이 커널에 영향을 끼칠 수 가 있어 보안적으로 대비가 필요하다. 
-->]]></content><author><name>박준수</name></author><category term="ICT" /><category term="서버" /><category term="3 계층 구조" /><category term="3-Tier Archtecture" /><summary type="html"><![CDATA[서버란 무엇인가.]]></summary></entry><entry><title type="html">SQL Injection</title><link href="http://localhost:4000/%EC%A0%95%EB%B3%B4%EB%B3%B4%EC%95%88/SQL-Injection/" rel="alternate" type="text/html" title="SQL Injection" /><published>2020-12-07T00:00:00+09:00</published><updated>2020-12-07T00:00:00+09:00</updated><id>http://localhost:4000/%EC%A0%95%EB%B3%B4%EB%B3%B4%EC%95%88/SQL-Injection</id><content type="html" xml:base="http://localhost:4000/%EC%A0%95%EB%B3%B4%EB%B3%B4%EC%95%88/SQL-Injection/"><![CDATA[<p>SQL Injection에 대해 알아보자.</p>

<p><strong>SQL Injection</strong>이란 공격자가 SQL 구문을 이용해 서버의 정보를 탈취하거나 인증을 우회하는 공격 기법이다.</p>

<p>SQL Injection에 많이 사용되는 함수들을 알아보자. 밑에 있는 함수들은 주로 MySQL에서 사용되는 함수들이다.</p>

<ul>
  <li>
    <h2 id="user">USER</h2>
    <p><strong>사용자</strong>와 <strong>호스트</strong>를 출력해주는 함수이다. 함수의 형태는 <strong>user()</strong>이고, select user()로 쿼리를 이용해 현재 사용자와 호스트를 출력할 수 있다.</p>
  </li>
  <li>
    <h2 id="version">VERSION</h2>
    <p>현재 <strong>데이터베이스의 버전</strong>을 출력해주는 함수이다. 함수의 형태는 <strong>version()</strong>이고, select version()로 쿼리를 실행해 현재 데이터베이스의 버전을 확인할 수 있다.</p>
  </li>
  <li>
    <h2 id="group_concat">GROUP_CONCAT</h2>
    <p><strong>UNION SELECT</strong>를 이용할 경우 확인할 수 있는 컬럼 수가 제한되는 경우가 많다. 예를 들어 계정 전체를 출력하고 싶은데 출력되는 로우가 하나일 경우 계정 하나 밖에 추출하지 못한다. 이 경우 사용하는 함수가 <strong>group_concat()</strong>이다. SELECT group_concat(name) from users로 쿼리를 돌릴 경우 usres의 name들이 하나의 컬럼으로 합쳐져서 출력된다.</p>
  </li>
</ul>]]></content><author><name>박준수</name></author><category term="정보보안" /><summary type="html"><![CDATA[SQL Injection에 대해 알아보자.]]></summary></entry><entry><title type="html">GNS3 Firewall 실습</title><link href="http://localhost:4000/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC/Firewall-in-gns3/" rel="alternate" type="text/html" title="GNS3 Firewall 실습" /><published>2020-12-02T00:00:00+09:00</published><updated>2020-12-02T00:00:00+09:00</updated><id>http://localhost:4000/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC/Firewall-in-gns3</id><content type="html" xml:base="http://localhost:4000/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC/Firewall-in-gns3/"><![CDATA[<p>GNS3에서 방화벽 Transparent 모드를 실습해 보자.</p>

<h2>Transparent 모드</h2>

<ul>
  <li>방화벽을 2계층에서 동작 시킨다.</li>
  <li>외부에서 봤을 때 홉수가 달라지지 않아 존재를 파악하기 힘들다. -&gt; 보안적으로 뛰어나다?!</li>
  <li>기존 장비들의 IP 주소를 변경시킬 필요가 없다.</li>
  <li>동일한 서브넷 상에서 이동하는 패킷을 검사하고 필터링할 수 있다.</li>
  <li>2계층 트래픽 검사하고 원하지 않는 트래픽 필터링 가능</li>
  <li>관리용 IP가 필요하다</li>
  <li>동적 라우팅 프로토콜을 지원하지 않으며, 수신한 패킷의 목적지 주소가 방화벽의 MAC 주소 테이블에 이씅면 해당 패킷을 전송하고, 존재하지 않을시 ARP를 수행해 MAC를 참조한다.</li>
  <li>컨텍스트?!
이용할시 별개의 네트워크 주소 사용, 동일한 서브넷 이용시 라우터에서 추가 설정 필요, 두 개 이상의 컨텍스에서 하나의 인터페이스 사용 불가.</li>
</ul>

<h2>실습</h2>

<h3 id="1-네트워크-전개">1. <strong>네트워크 전개</strong></h3>
<p><img src="/img/gns3TPFirewall/firewall_tp_network.png" alt="Network Structure" /></p>
<h3 id="2-firewall-설정">2. Firewall 설정</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>FW1(config)# firewall transparent
FW1(config)# int bvi 1
FW1(config)# ip add 10.1.12.10 255.255.255.0
FW1(config)# int gi0/0
FW1(config)# bridge-group 1
FW1(config)# nameif inside
FW1(config)# no sh
FW1(config)# int gi0/1
FW1(config)# bridge-group 1
FW1(config)# nameif outside
FW1(config)# no sh
FW1(config)# show bridge-group
</code></pre></div></div>

<p><img src="/img/gns3TPFirewall/firewall_tp_fw1.png" alt="fwimg1" /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>FW1(config)# show int ip brief
</code></pre></div></div>

<p><img src="/img/gns3TPFirewall/firewall_tp_fw2.png" alt="fwimg2" /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>FW1(config)# access-list INSIDE-INBOUND permit ip any any
FW1(config)# access-list INSIDE-INBOUND in interface inside
FW1(config)# access-group INSIDE-INBOUND in interface inside
FW1(config)# access-list OUTSIDE-INBOUND permit ospf host 10.1.12.2 any
FW1(config)# access-group OUTSIDE-INBOUND in interface outside
FW1(config)# access-list OUTSIDE-INBOUND permit icmp host 10.1.12.2 host 10.1.12.1
# 이렇게 하면 핑이 갑니다.
# 이게 뭘까..
object network INSIDE-NETWORK
subnet 10.1.12.0 255.255.255.0
nat (inside,outside) dynamic 1.1.1.1
# 10.1.12.0 대역을 1.1.1.1로 변환하는 것. 아펭서는 10.1.12.1 밖에 없으니 1.1.1.1로 다 변환을 하더라도 무리가 없겠죠?
</code></pre></div></div>

<h3 id="3-라우터-설정">3. 라우터 설정</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>R1(config)# router ospf 1
R1(config)# network 10.1.12.1 0.0.0.0 area 0
R1(config)# network 10.1.1.1 0.0.0.0 area 0

R2(config)# ip route 0.0.0.0 0.0.0.0 1.1.23.3
R2(config)# router ospf 1
R2(config)# net 10.1.2.2 0.0.0.0 area 0
R2(config)# net 10.1.12.2 0.0.0.0 area 0
R2(config)# default-information originate

R3(config)# ip route 1.1.1.0 255.255.255.0 1.1.23.2 
# NAT를 하기 위함이래...
R3(config)# line vty 0 4
R3(config)# password cisco
R3(config)# login
# R1에서 telnet으로 R3에 접속하면 R1의 아이피가 1.1.1.1로 바뀌어 오겠지?	
</code></pre></div></div>

<h3 id="4-결과-확인">4. 결과 확인</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>FW1(cofig)# show xlate
</code></pre></div></div>
<p><img src="/img/gns3TPFirewall/firewall_tp_fw3.png" alt="fwimg3" /></p>

<h3 id="5-추가-과제">5. 추가 과제</h3>

<p><strong>ARP Spoofing</strong> 막아보기!</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>FW1(config)# clear configure object
</code></pre></div></div>

<p>기존 정보 삭제</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>FW1(config)# arp inside 10.1.12.1 [mac address]
FW1(config)# arp outside 10.1.12.2 [mac address]
</code></pre></div></div>

<p>MAC Address는 라우터에서 show interface를 통해 확인할 수 있습니다.</p>

<p>ex) <code class="language-plaintext highlighter-rouge">R1(config)# do show interface int fa0/0</code></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> R2(config)# int fa0/0 mac-address 1234.5678.0000
</code></pre></div></div>

<p>R2의 MAC 주소를 수정한 후 R1에서 핑을 날릴 경우 R1의 ARP 테이블이 변경되는 것을 알 수 있습니다.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> R1(config)# do ping 10.1.12.2
 R1(config)# show arp
</code></pre></div></div>
<p><img src="/img/gns3TPFirewall/firewall_tp_r2.png" alt="rimg1" /></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> FW1(config)arp-inspection inside enable
 FW1(config)arp-inspection outside enable no-flood
</code></pre></div></div>

<p><img src="/img/gns3TPFirewall/firewall_tp_fw4.png" alt="fwimg4" /></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> R1# clear arp-cache
 R1# show arp
</code></pre></div></div>
<p>show arp로 기존에 지정된 1234.5678.0000이 없어질 때까지 <code class="language-plaintext highlighter-rouge">clear arp-cache</code> 명령어를 반복해주자. 한번에 잘 안된다.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>R1# ping 10.1.12.2
</code></pre></div></div>
<p><img src="/img/gns3TPFirewall/firewall_tp_r3.png" alt="rimg1" /></p>

<p>ARP-cache를 초기화 해준뒤 ping을 보내보면 ping이 막힌 것을 볼 수 있다. 지정된 MAC 주소와 현재 R2의 MAC 주소가 달라서 기존에 전송되던 핑이 전송이 되지 않는다. 방화벽에서 inside와 outside의 MAC 주소를 잡아주고 arp-inspection 명령어를 통해 패킷들을 검사하고 OUTSIDE에서 접근하는 패킷의 경우 검사를 통과하지 못하면 no-flood 즉, 통과 시키지 않는다.</p>]]></content><author><name>박준수</name></author><category term="네트워크" /><summary type="html"><![CDATA[GNS3에서 방화벽 Transparent 모드를 실습해 보자.]]></summary></entry><entry><title type="html">IP Class들과 서브넷</title><link href="http://localhost:4000/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC/IP-Class/" rel="alternate" type="text/html" title="IP Class들과 서브넷" /><published>2020-11-24T00:00:00+09:00</published><updated>2020-11-24T00:00:00+09:00</updated><id>http://localhost:4000/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC/IP-Class</id><content type="html" xml:base="http://localhost:4000/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC/IP-Class/"><![CDATA[<p>IP 클래스들에 대해 알아보자.</p>

<p>IP의 경우 5개의 클래스로 이루어져있다. 그리고 클래스 별로 서브넷 마스크가 달라 이에 대한 숙지가 필요하다.</p>

<h2>공인 IP와 사설 IP</h2>
<p><strong>공인 IP</strong>란 전 세계에서 유일한 IP 주소로 ISP가 제공하는 IP 주소이다. 외부에 공개된 주소로 인터넷에 연결된 다른 PC로부터의 접근이 가능하다. 즉 외부 네트워크에 연결하기 위해 필요한 IP로 할당을 하지 못한다.</p>

<p><strong>사설 IP</strong>란 일반 가정 및 회사 등의 할당된 IP 주소로, 로컬 IP라고도 불린다. 개인적인 내부 네트워크에서만 사용 가능한 IP를 의미한다.</p>

<h2>A 클래스</h2>
<p>0.0.0.0 ~ 127.255.255.255
주로 대규모 네트워크에 사용된다. 처음 8비트만이 네트워크 ID에 해당되고 나머지 비트는 호스트 ID에 해당되며 서브넷 마스크는 255.0.0.0
사설 IP의 경우 10.0.0.0 ~ 10.255.255.255</p>
<h2>B 클래스</h2>
<p>128.0.0.0 ~ 191.255.255.255
네트워크 ID는 처음 16비트에 해당되며 서브넷 마스크는 255.255.0.0
사설 IP의 경우 172.16.0.0 ~ 172.31.255.255</p>
<h2>C 클래스</h2>
<p>192.0.0.0 ~ 223.255.255.255
네트워크 ID는 24비트가 해당되고 서브넷 마스크는 255.255.255.0
사설 IP의 경우 192.168.0.0 ~ 192.168.255.255</p>
<h2>D 클래스</h2>
<p>224.0.0.0 ~ 239.255.255.255
멀티캐스트 주소로 예약되어 있고 IP 할당에 이용되지 않는다.</p>
<h2>E 클래스</h2>
<p>240.0.0.0 ~ 255.255.255.255
IANA에서 사용을 허가하지 않은 IP 대역.</p>

<p>네트워크 관리사 문제를 보면 네트워크를 서브넷으로 나누는 문제가 나온다. 어떻게 나눌 수 있는지 알아보자.</p>]]></content><author><name>박준수</name></author><category term="네트워크" /><summary type="html"><![CDATA[IP 클래스들에 대해 알아보자.]]></summary></entry><entry><title type="html">파이썬</title><link href="http://localhost:4000/%ED%8C%8C%EC%9D%B4%EC%8D%AC/Python/" rel="alternate" type="text/html" title="파이썬" /><published>2020-11-16T00:00:00+09:00</published><updated>2020-11-16T00:00:00+09:00</updated><id>http://localhost:4000/%ED%8C%8C%EC%9D%B4%EC%8D%AC/Python</id><content type="html" xml:base="http://localhost:4000/%ED%8C%8C%EC%9D%B4%EC%8D%AC/Python/"><![CDATA[<p>파이썬에 대해 알아보자.</p>

<p>프로그래밍 언어엔 <strong>컴파일러 언어와 인터프리터 언어</strong>가 있다.</p>

<h2>컴파일러 언어</h2>
<p>보통 우리가 많이 사용했던 JAVA, C++, C 등은 컴파일러 언어라고한다. 컴파일러가 컴파일 과정에서 소스 코드를 기계언어로 바꾸고 이를 컴퓨터에서 동작시킨다. 반응성이 빠르지만 빌드 과정에서 시간이 소요되 작은 수정을 하더라도 빌드 시간이 오래 걸린다.</p>

<h2>인터프리터 언어</h2>
<p>인터프리터 언어의 경우 컴파일 과정이 없고, 바로 실행 된다. 한줄 한줄 해석해 바로 명령어를 실행하는데, 반응성은 떨어지지만 빌드 시간 등이 필요 없다. 스크립트 언어와 파이썬이 해당된다.</p>]]></content><author><name>박준수</name></author><category term="파이썬" /><summary type="html"><![CDATA[파이썬에 대해 알아보자.]]></summary></entry><entry><title type="html">프로토콜에 따른 패킷의 헤더</title><link href="http://localhost:4000/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC/Network-UDP-Header/" rel="alternate" type="text/html" title="프로토콜에 따른 패킷의 헤더" /><published>2020-11-16T00:00:00+09:00</published><updated>2020-11-16T00:00:00+09:00</updated><id>http://localhost:4000/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC/Network-UDP-Header</id><content type="html" xml:base="http://localhost:4000/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC/Network-UDP-Header/"><![CDATA[<p>프로토콜에 따른 패킷의 헤더들에 대해 알아보자.</p>

<h2>UDP 패킷 헤더</h2>

<p><strong>UDP 패킷 헤더</strong>는 64비트로 16비트의 4가지 필드로 구성되어 있다.</p>

<ul>
  <li>Source Port Number: 송신 포트 번호</li>
  <li>Destination Port Number: 수신 포트 번호</li>
  <li>UDP Length: 패킷의 길이</li>
  <li>UDP Checksum: 패킷 전체의 Checksum, 이 필드가 0일 경우 수신측은 체크섬을 계산하지 않는다.</li>
</ul>]]></content><author><name>박준수</name></author><category term="네트워크" /><summary type="html"><![CDATA[프로토콜에 따른 패킷의 헤더들에 대해 알아보자.]]></summary></entry><entry><title type="html">DHCP</title><link href="http://localhost:4000/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC/DHCP/" rel="alternate" type="text/html" title="DHCP" /><published>2020-11-12T00:00:00+09:00</published><updated>2020-11-12T00:00:00+09:00</updated><id>http://localhost:4000/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC/DHCP</id><content type="html" xml:base="http://localhost:4000/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC/DHCP/"><![CDATA[<p>DHCP란 무엇인가</p>

<h2>DHCP</h2>

<p><strong>Dynamic Host Configuration Protocol</strong>의 약자</p>

<p>DHCP 서버가 하는 역할은 자신의 네트워크 안에 있는 클라이언트 컴퓨터가 부팅될 떄 자동으로 네트워크 설정(IP,서브넷 마스크, 게이트웨이 주소, DNS 서버 주소)을 할당해 주는 것이다.</p>

<h2>서버의 동작 방식</h2>

<p><strong>동적 할당</strong> : 네트워크 관리자가 일정 범위의 IP 주소를 지정하고  클라이언트의 요청에 따라 IP를 할당해 준다. 임대 개념으로 이뤄지고 임대 기간이 지나면 IP를 회수하고 다시 할당하는 방식이다.</p>

<p><strong>자동 할당</strong> : 동적할당과 유사하나 클라이언트에 할당된 IP가 영구적으로 적용된다.</p>

<p><strong>수동 할당</strong> : MAC 주소기반으로 이루어지고, 서브넷 범위 안에서 고정 IP를 할당하는 방법이다. 고정 할당이라고도 불리며 현업에서는 주로 이 방법이 사용된다.</p>]]></content><author><name>박준수</name></author><category term="네트워크" /><summary type="html"><![CDATA[DHCP란 무엇인가]]></summary></entry><entry><title type="html">메일 프로토콜과 구성요소</title><link href="http://localhost:4000/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC/Mail-Protocol/" rel="alternate" type="text/html" title="메일 프로토콜과 구성요소" /><published>2020-11-12T00:00:00+09:00</published><updated>2020-11-12T00:00:00+09:00</updated><id>http://localhost:4000/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC/Mail-Protocol</id><content type="html" xml:base="http://localhost:4000/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC/Mail-Protocol/"><![CDATA[<p>메일 프로토콜과 구성요소에 대해 알아보자.</p>

<h2>메일 프로토콜</h2>

<p><strong>SMTP</strong> : Simple Mail Transfer Protocol 클라이언트에서 메일을 보내거나 메일 서버끼리 메일을 주고 받을 떄 사용하는 프로토콜</p>

<p><strong>POP3, IMAP3</strong> : 메일 서버에 있는 메일을 클라이언트로 가져오는 프로토콜</p>

<p>보낼 때는 SMTP 받을 때는 POP3, IMAP3</p>

<p><strong>차이점</strong>
POP3의 경우 클라이언트가 서버의 메일을 가져오게 되면 서버의 메일은 삭제된다. IMAP3의 경우 클라이언트가 가져간다 하더라도 서버의 메일은 유지된다. 서버가 메일을 감당하기 힘들 경우 POP3를 사용하게 되면 서버의 비용이 준다는 장점이 있다. 요즘은 보통 IMAP을 사용합니다.</p>

<p>구성 요소</p>

<p>MTA, MUA, MDA, MRA, 메일 큐</p>

<p><strong>MUA</strong>: Mail User Agnet 자신이 속한 메일 서버에 전송해 줍니다. 메일을 다운로드하거나 MTA로 업로드. SMTP에 의해 접속하며 인증과정 필요.</p>

<p>ex) Thunderbird, Outlook, Evolution</p>

<p><strong>MTA</strong>: Mail Transfer Agent. 다른 MTA나 메일 사용자에게 메일을 보내거나 받는 역할을 해줍니다.(RELAY 과정) 또한, 바이러스 및 스팸 메일과 같은 필터링 기능이 있다. 25포트를 사용하는 SMTP에 의해 이뤄진다.</p>

<p>ex) sendmail,Qmail,Postfix</p>

<p><strong>MDA</strong>: Mail Delivery Agent 메일 서버간 메일을 송신해줍니다. MTA한테 메일을 받아 사용자의 메일서버에 저장 및 운반하는 역할. 메일 서버의 메일을 MUA가 읽어 로컬 PC에 다운로드 시 IMAP POP3</p>

<p>ex) Dovecot, Courier, Cyrus</p>

<p><strong>메일 큐</strong>: 전송량이 많아 메일이 전송되지 않을 경우 메일이 보내지지 않는 경우가 많았다고 한다. 그래서 메일 큐를 생성해 메일을 보내지 못할 경우 큐에 저장을 해놓고 전송이 가능할 때 메일을 보내주는 개념이다.</p>

<p><strong>MRA</strong>: Mail Retrieval Agent 리모트 서버에 있는 우편함으로부터 사용자의 MUA로 메시지를 가져오는 프로그램.
&lt;!–</p>

<p>dns mx(mailexchanger) 추가
nslookup에서 지정한 도메인을 쳤을 경우 ip가 정확하면 성공.</p>

<p>dns 설정을 자신이 설정한 ip로 설정해줘야합니다.
sendmail-cf , dovecot 다운로드 
이툴을 이용해서 할껀가봐
/sendmail.cf
85 localhost를 자신이 설정한 mail 도메인으로
264 수정 루프백 아이피 제거</p>

<p>/etc/mail/access에 지정한 도메인 추가</p>

<p>restart 하고 makemap hash를 통해 재생성</p>

<p>/etc/dovecot/conf.d/10-mail.conf
25,116 : 주석제거
121 : group mail 추가</p>

<p>10-auth.conf
10: no로 plaintext_auth를 가능하게</p>

<p>10-ssl.conf
8 :ssl yes</p>

<p>user 추가</p>

<p>sendmail, dovecot  재시작</p>

<p>thunderbird 설치 후 자신에게 메일 보내보기</p>

<p>thunderbird 설정 포트 110,25 서버 호스트 생성해준것으로, ssl은 사용하지 않고 인증은 평문패스워드와 커버로스 –&gt;</p>]]></content><author><name>박준수</name></author><category term="네트워크" /><summary type="html"><![CDATA[메일 프로토콜과 구성요소에 대해 알아보자.]]></summary></entry></feed>